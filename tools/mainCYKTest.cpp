#include <iostream>
#include <cassert>

#include <UTM/Symbol.h>
#include <UTM/CFG.h>
#include <UTM/CFGParser.h>
#include <UTM/CFG2CNF.h>
#include <UTM//dot.h>

int main(int argc, char* argv[])
{
	std::string stringToTestMembershipOf;
	std::string cfgFilename;
	if (argc != 3) {
		std::cout << "This program checks whether a given string is generated by a given context-free grammar in CNF." << std::endl;
		std::cout << "Usage: filename string" << std::endl;
		return 1;
	}

	stringToTestMembershipOf = std::string(argv[2]);
	cfgFilename = std::string(argv[1]);

	CFGParser parser(cfgFilename.c_str());

	CFG cfg(parser.getVariables(), parser.getTerminals(), parser.getProductionRules(), parser.getStartSymbol(), parser.getName());

	std::cout << cfg;
	std::cout << "The grammar is " << (cfg.isConsistent() ? "" : "not ") << "consistent" << std::endl << std::endl;
	std::cout << "Converting CFG to CN form..." << std::endl;

	CFG2CNF converter;
	cfg = converter(cfg);

	std::cout << cfg;
	std::cout << "The grammar is " << (cfg.isConsistent() ? "" : "not ") << "consistent" << std::endl << std::endl;
	std::cout << "Is \"" << stringToTestMembershipOf << "\" member?\n" << (cfg.isMember(stringToTestMembershipOf) ? "yes" : "no") << std::endl;

  FiniteAutomaton pda = cfg.generatePDA();
  writeDotFile(&pda, "generatedPda.dot");

	return 0;
}
